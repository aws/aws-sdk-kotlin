name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

# Allow one instance of this workflow per pull request, and cancel older runs when new changes are pushed
concurrency:
  group: ci-pr-${{ github.ref }}
  cancel-in-progress: true

env:
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
  jvm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 8
          - 11
          - 17
          - 19
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          path: 'aws-sdk-kotlin'
      - name: Setup Build
        uses: ./aws-sdk-kotlin/.github/actions/setup-build
      - name: Test
        working-directory: ./aws-sdk-kotlin
        shell: bash
        run: |
          pwd
          ls -lsa
          ./gradlew -Djava.test.version=${{ matrix.java-version }} jvmTest --stacktrace",

  all-platforms:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          path: 'aws-sdk-kotlin'
      - name: Setup Build
        uses: ./aws-sdk-kotlin/.github/actions/setup-build
      - name: Test
        working-directory: ./aws-sdk-kotlin
        shell: bash
        run: |
          pwd
          systeminfo
          ./gradlew publishToMavenLocal
          ./gradlew apiCheck
          ./gradlew test allTests
          ./gradlew testAllProtocols

#  linux-compat:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v4
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#      - name: Build and Test ${{ env.PACKAGE_NAME }}
#        run: |
#          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
#          chmod a+x builder.pyz
#          echo "kotlinWarningsAsErrors=true" >> $GITHUB_WORKSPACE/local.properties
#          ./builder.pyz build -p ${{ env.PACKAGE_NAME }}
#
#  macos-compat:
#    runs-on: macos-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v4
#      - uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#      - name: Build and Test ${{ env.PACKAGE_NAME }}
#        run: |
#          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
#          chmod a+x builder.pyz
#          echo "kotlinWarningsAsErrors=true" >> $GITHUB_WORKSPACE/local.properties
#          ./builder.pyz build -p ${{ env.PACKAGE_NAME }}
#
#  windows-compat:
#    runs-on: windows-2019
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v4
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '11'
#          cache: 'gradle'
#      - name: Modify Gradle Daemon JVM Args
#        # windows job runs out of memory with the defaults normally used
#        shell: bash
#        run: |
#          systeminfo
#          sed -i 's/org\.gradle\.jvmargs=.*$/org.gradle.jvmargs=-Xmx2g/' gradle.properties
#          echo "org.gradle.parallel=false" >> gradle.properties
#          cat gradle.properties
#      - name: Build and Test ${{ env.PACKAGE_NAME }}
#        run: |
#          python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
#          java -version
#          python3 builder.pyz build -p ${{ env.PACKAGE_NAME }}
