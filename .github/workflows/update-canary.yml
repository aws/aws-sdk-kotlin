# After every GitHub release, verify that the Maven artifacts are available, then kick off
# a canary deployment with the latest version of the SDK.
name: Update Canary
on:
  release:
    types: [ published ]

jobs:
  update-canary:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CI_AWS_ROLE_ARN }}
          aws-region: us-west-2

      # Maven can take up to an hour after the release has succeeded to publish our artifacts
      - name: Verify artifact is available on Maven
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          MAVEN_URL="https://repo.maven.apache.org/maven2/aws/sdk/kotlin/s3/${VERSION}/"
          
          echo "Checking for an artifact at $MAVEN_URL"
          
          # Retry settings
          MAX_WAIT_MINUTES=60
          INTERVAL_SECONDS=30
          MAX_ATTEMPTS=$(( MAX_WAIT_MINUTES * 60 / INTERVAL_SECONDS ))
          ATTEMPT=1

          while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$MAVEN_URL")
            if [[ "$STATUS" == "200" ]]; then
              echo "Artifact is available at $MAVEN_URL"
              exit 0
            fi

            sleep "$INTERVAL_SECONDS"
            ((ATTEMPT++))
          done

          echo "Timed out after $MAX_WAIT_MINUTES minutes. Artifact not available at $MAVEN_URL"
          exit 1

      - name: Update canary
        shell: bash
        run: |
          set -euo pipefail

          TAG="${{ github.event.release.tag_name }}"
          EXECUTION_NAME="update-canary-${TAG}"
          STATE_MACHINE_ARN="arn:aws:states:us-west-2:${{ secrets.CI_USER }}:stateMachine:DeployLatestSdkVersion"

          echo "Starting step function: $EXECUTION_NAME"
            EXECUTION_ARN=$(aws stepfunctions start-execution \
            --state-machine-arn "$STATE_MACHINE_ARN" \
            --name "$EXECUTION_NAME" \
            --input '{}' \
            --query 'executionArn' \
            --output text)
          
          echo "Waiting for step function to complete..."
          
          MAX_WAIT_SECONDS=$((15 * 60))
          INTERVAL=10
          ELAPSED=0
      
          while true; do
            STATUS=$(aws stepfunctions describe-execution --execution-arn "$EXECUTION_ARN" --query 'status' --output text)
            
            if [[ "$STATUS" == "SUCCEEDED" ]]; then
              echo "Step Function completed successfully"
              break
            elif [[ "$STATUS" == "FAILED" || "$STATUS" == "TIMED_OUT" || "$STATUS" == "ABORTED" ]]; then
              echo "Step Function failed with status: $STATUS"
              exit 1
            fi
            
            if [[ "$ELAPSED" -ge "$MAX_WAIT_SECONDS" ]]; then
              echo "Timeout exceeded, cancelling..."
              exit 1
            fi
            
            sleep "$INTERVAL"
            ELAPSED=$((ELAPSED + INTERVAL))
          done