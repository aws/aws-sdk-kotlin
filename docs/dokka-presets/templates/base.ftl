<#-- This is an unchanged copy of Dokka's base.ftl -->
<#import "includes/page_metadata.ftl" as page_metadata>
<#import "includes/header.ftl" as header>
<#import "includes/footer.ftl" as footer>
<!DOCTYPE html>
<html class="no-js" lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <@page_metadata.display/>
    <@template_cmd name="pathToRoot"><script>var pathToRoot = "${pathToRoot}";</script></@template_cmd>
    <script>document.documentElement.classList.replace("no-js","js");</script>
    <#-- This script doesn't need to be there but it is nice to have
    since app in dark mode doesn't 'blink' (class is added before it is rendered) -->
    <script>const storage = localStorage.getItem("dokka-dark-mode")
        if (storage == null) {
            const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
            if (osDarkSchemePreferred === true) {
                document.getElementsByTagName("html")[0].classList.add("theme-dark")
            }
        } else {
            const savedDarkMode = JSON.parse(storage)
            if(savedDarkMode === true) {
                document.getElementsByTagName("html")[0].classList.add("theme-dark")
            }
        }
    </script>
    <#-- Resources (scripts, stylesheets) are handled by Dokka.
    Use customStyleSheets and customAssets to change them. -->
    <@resources/>

    <script>
        <#-- Fix for accessibiliy violation: "Provide a mechanism for skipping past repetitive content" -->
        document.addEventListener('DOMContentLoaded', function() {
            function insertSkipLink(element) {
                const skipLink = document.createElement('div');
                // Create an anchor element with the href pointing to the main content
                const anchor = document.createElement('a');
                anchor.classList.add('skip-to-content');
                anchor.href = '#content';
                anchor.innerHTML = 'Skip to Main Content';
                anchor.setAttribute("tabindex", "0");
                skipLink.appendChild(anchor);
                if (element.children.length > 1) {
                    element.insertBefore(skipLink, element.children[1]);
                } else {
                    element.appendChild(skipLink);
                }
            }

            const observerConfig = {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['class']
            };

            function handleChanges(mutationsList) {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                        // Check added nodes for elements with class 'sideMenuPart' and without class 'hidden'
                        mutation.addedNodes.forEach(function(node) {
                            if (node.nodeType === 1 && node.classList.contains('sideMenuPart') && !node.classList.contains('hidden')) {
                                insertSkipLink(node);
                            }
                        });
                    } else if (mutation.type === 'attributes' && mutation.target.classList.contains('sideMenuPart') && !mutation.target.classList.contains('hidden')) {
                        // Handle changes in the 'class' attribute of existing elements
                        // Check if the element is 'sideMenuPart' and not 'hidden'
                        insertSkipLink(mutation.target);
                    }
                }
            }
            // Create a MutationObserver with the callback function
            const observer = new MutationObserver(handleChanges);
            // Start observing changes in the document
            observer.observe(document.body, observerConfig);
        });

        <#-- Fix for accessibilty violation: "Ensure all interactive functionality is operable with the keyboard" -->
        window.onload = function() {
            const navButtons = document.querySelectorAll('.navButton');

            navButtons.forEach(function(navButton) {
                // Make the navButton focusable, add accessibility information
                navButton.setAttribute('tabindex', '0');
                navButton.setAttribute('role', 'button');
                navButton.setAttribute('aria-expanded', 'false');

                // Grab the grandparent element's page ID, use it for aria-label and aria-controls
                const sectionName = navButton.parentElement.parentElement.getAttribute('pageid')
                // Remove the page ID suffix auto-generated by Dokka
                const cleanedSectionName = sectionName.substring(0, sectionName.indexOf("////PointingToDeclaration"))
                navButton.setAttribute('aria-label', cleanedSectionName);

                const sectionID = navButton.parentElement.parentElement.id
                navButton.setAttribute('aria-controls', sectionID);

                // Add event listener for Enter and Space keys
                navButton.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter' || event.key === ' ') {
                        event.preventDefault(); // Prevent the default action to avoid navigation
                        this.click(); // Trigger the onclick event
                    }
                });

                // Update aria-expanded attribute on click
                navButton.addEventListener('click', function() {
                    const isExpanded = navButton.getAttribute('aria-expanded') === 'true';
                    navButton.setAttribute('aria-expanded', (!isExpanded).toString());
                });
            });
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const MIN_WINDOW_SIZE = 550

            // Function to insert 'toggle content' button
            function insertToggleContentButton(element) {
                const toggleContent = document.createElement('button');
                toggleContent.className = 'aws-toggle-content-btn';
                toggleContent.textContent = 'â˜°';

                const initiallyVisible = window.innerWidth >= MIN_WINDOW_SIZE

                toggleContent.setAttribute('aria-expanded', initiallyVisible.toString());
                toggleContent.setAttribute('aria-label', 'Toggle code block for' + element.getAttribute("data-togglable"));
                toggleContent.setAttribute('aria-controls', element.id);

                if (!initiallyVisible) {
                    element.style.display = 'none';
                }

                toggleContent.onclick = function() {
                    const isExpanded = toggleContent.getAttribute('aria-expanded') === 'true';
                    toggleContent.setAttribute('aria-expanded', (!isExpanded).toString());
                    if (isExpanded) {
                        element.style.display = 'none';
                    } else {
                        element.style.display = 'block';
                    }

                };

                // Insert the hamburger button before the content element
                element.parentNode.insertBefore(toggleContent, element);
            }

            document.querySelectorAll('.content[data-togglable]').forEach(insertToggleContentButton);

            // Update content visibility on resize
            window.addEventListener('resize', function() {
                document.querySelectorAll('.content[data-togglable]').forEach(function(element) {
                    const toggleContent = element.previousSibling;
                    if (window.innerWidth < MIN_WINDOW_SIZE) {
                        element.style.display = 'none';
                        toggleContent.setAttribute('aria-expanded', 'false');
                    } else {
                        element.style.display = 'block';
                        toggleContent.setAttribute('aria-expanded', 'true');
                    }
                });
            });
        });
    </script>
</head>
<body>
<div class="root">
    <@header.display/>
    <div id="container">
        <div class="sidebar" id="leftColumn">
            <div class="sidebar--inner" id="sideMenu"></div>
        </div>
        <div id="main">
            <@content/>
            <@footer.display/>
        </div>
    </div>
</div>
</body>
</html>
