// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package aws.sdk.kotlin.services.polly

import aws.sdk.kotlin.runtime.ClientException
import aws.sdk.kotlin.runtime.auth.CredentialsProvider
import aws.sdk.kotlin.runtime.auth.DefaultChainCredentialsProvider
import aws.sdk.kotlin.runtime.auth.PresignedRequest
import aws.sdk.kotlin.runtime.auth.PresignedRequestConfig
import aws.sdk.kotlin.runtime.auth.ServicePresignConfig
import aws.sdk.kotlin.runtime.auth.SigningLocation
import aws.sdk.kotlin.runtime.auth.createPresignedRequest
import aws.sdk.kotlin.runtime.endpoint.EndpointResolver
import aws.sdk.kotlin.services.polly.internal.DefaultEndpointResolver
import aws.sdk.kotlin.services.polly.model.SynthesizeSpeechRequest
import aws.sdk.kotlin.services.polly.transform.SynthesizeSpeechOperationSerializer
import aws.smithy.kotlin.runtime.client.ExecutionContext
import aws.smithy.kotlin.runtime.http.HttpMethod
import aws.smithy.kotlin.runtime.http.QueryParametersBuilder

/**
 * Presign a [SynthesizeSpeechRequest] using a [ServicePresignConfig].
 * @param serviceClientConfig the client configuration used to generate the presigned request
 * @param durationSeconds the amount of time from signing for which the request is valid, with seconds granularity.
 * @return The [PresignedRequest] that can be invoked within the specified time window.
 */
suspend fun SynthesizeSpeechRequest.presign(serviceClientConfig: ServicePresignConfig, durationSeconds: ULong): PresignedRequest {
    return createPresignedRequest(serviceClientConfig, synthesizeSpeechPresignConfig(this, durationSeconds))
}

/**
 * Presign a [SynthesizeSpeechRequest] using a [PollyClient].
 * @param serviceClient the client providing properties used to generate the presigned request.
 * @param durationSeconds the amount of time from signing for which the request is valid, with seconds granularity.
 * @return The [PresignedRequest] that can be invoked within the specified time window.
 */
suspend fun SynthesizeSpeechRequest.presign(serviceClient: PollyClient, durationSeconds: ULong): PresignedRequest {
    val serviceClientConfig = object : ServicePresignConfig {
        override val region: String = requireNotNull(serviceClient.config.region) { "Service client must set a region." }
        override val serviceName: String = "polly"
        override val endpointResolver: EndpointResolver = serviceClient.config.endpointResolver ?: DefaultEndpointResolver()
        override val credentialsProvider: CredentialsProvider = serviceClient.config.credentialsProvider ?: DefaultChainCredentialsProvider()
    }
    return createPresignedRequest(serviceClientConfig, synthesizeSpeechPresignConfig(this, durationSeconds))
}

private suspend fun synthesizeSpeechPresignConfig(request: SynthesizeSpeechRequest, durationSeconds: ULong): PresignedRequestConfig {
    require(durationSeconds > 0u) { "duration must be greater than zero" }
    val httpRequestBuilder = SynthesizeSpeechOperationSerializer().serialize(ExecutionContext.build { }, request)
    val queryStringBuilder = QueryParametersBuilder()
    if (request.engine != null) {
        queryStringBuilder.append("Engine", request.engine.toString())
    }
    if (request.languageCode != null) {
        queryStringBuilder.append("LanguageCode", request.languageCode.toString())
    }
    if (request.lexiconNames != null) {
        queryStringBuilder.append("LexiconNames", request.lexiconNames.toString())
    }
    if (request.outputFormat != null) {
        queryStringBuilder.append("OutputFormat", request.outputFormat.toString())
    }
    if (request.sampleRate != null) {
        queryStringBuilder.append("SampleRate", request.sampleRate.toString())
    }
    if (request.speechMarkTypes != null) {
        queryStringBuilder.append("SpeechMarkTypes", request.speechMarkTypes.toString())
    }
    if (request.text != null) {
        queryStringBuilder.append("Text", request.text.toString())
    }
    if (request.textType != null) {
        queryStringBuilder.append("TextType", request.textType.toString())
    }
    if (request.voiceId != null) {
        queryStringBuilder.append("VoiceId", request.voiceId.toString())
    }
    return PresignedRequestConfig(
        HttpMethod.GET,
        httpRequestBuilder.url.path,
        queryStringBuilder.build(),
        durationSeconds.toLong(),
        false,
        SigningLocation.QUERY_STRING
    )
}

/**
 * Provides a subset of the service client configuration necessary to presign a request.
 * This type can be used to presign requests in cases where an existing service client
 * instance is not available.
 */
class PollyPresignConfig private constructor(builder: BuilderImpl) : ServicePresignConfig {
    override val credentialsProvider: CredentialsProvider = builder.credentialsProvider ?: DefaultChainCredentialsProvider()
    override val endpointResolver: EndpointResolver = builder.endpointResolver ?: DefaultEndpointResolver()
    override val region: String = builder.region ?: throw ClientException("Must specify a region")
    override val serviceName: String = "polly"
    companion object {
        @JvmStatic
        fun fluentBuilder(): FluentBuilder = BuilderImpl()
        fun builder(): DslBuilder = BuilderImpl()
        operator fun invoke(block: DslBuilder.() -> kotlin.Unit): ServicePresignConfig = BuilderImpl().apply(block).build()
    }

    interface FluentBuilder {
        fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder
        fun endpointResolver(endpointResolver: EndpointResolver): FluentBuilder
        fun region(region: String): FluentBuilder
        fun build(): PollyPresignConfig
    }

    interface DslBuilder {
        /**
         * The AWS credentials provider to use for authenticating requests. If not provided a [aws.sdk.kotlin.runtime.auth.DefaultChainCredentialsProvider] instance will be used.
         */
        var credentialsProvider: CredentialsProvider?

        /**
         * Determines the endpoint (hostname) to make requests to. When not provided a default resolver is configured automatically. This is an advanced client option.
         */
        var endpointResolver: EndpointResolver?

        /**
         * AWS region to make requests to
         */
        var region: String?

        fun build(): PollyPresignConfig
    }

    internal class BuilderImpl() : FluentBuilder, DslBuilder {
        override var credentialsProvider: CredentialsProvider? = null
        override var endpointResolver: EndpointResolver? = null
        override var region: String? = null

        override fun build(): PollyPresignConfig = PollyPresignConfig(this)
        override fun credentialsProvider(credentialsProvider: CredentialsProvider): FluentBuilder = apply { this.credentialsProvider = credentialsProvider }
        override fun endpointResolver(endpointResolver: EndpointResolver): FluentBuilder = apply { this.endpointResolver = endpointResolver }
        override fun region(region: String): FluentBuilder = apply { this.region = region }
    }
}
