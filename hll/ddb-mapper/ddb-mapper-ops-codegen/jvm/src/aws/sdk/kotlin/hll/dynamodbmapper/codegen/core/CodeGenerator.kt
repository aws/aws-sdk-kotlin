/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
package aws.sdk.kotlin.hll.dynamodbmapper.codegen.core

private const val INDENT = "    "

internal interface CodeGenerator {
    val imports: ImportDirectives
    fun blankLine()
    fun closeBlock(template: String, vararg args: Any)
    fun closeAndOpenBlock(template: String, vararg args: Any)
    fun dedent(levels: Int = 1)
    fun indent(levels: Int = 1)
    fun openBlock(template: String, vararg args: Any)
    fun persist()
    fun withBlock(preTemplate: String, postText: String, vararg args: Any, block: () -> Unit)
    fun withDocs(block: () -> Unit)
    fun write(template: String, vararg args: Any)
    fun writeInline(template: String, vararg args: Any)
}

internal class CodeGeneratorImpl(
    private val pkg: String,
    private val engine: TemplateEngine,
    private val persistCallback: (String) -> Unit,
    override val imports: ImportDirectives = ImportDirectives(),
) : CodeGenerator {
    private val builder = StringBuilder()
    private var indent = ""

    override fun blankLine() {
        if (!builder.endsWith("\n\n")) builder.append('\n')
    }

    override fun closeBlock(template: String, vararg args: Any) {
        dedent()
        write(template, *args)
    }

    override fun closeAndOpenBlock(template: String, vararg args: Any) {
        dedent()
        write(template, *args)
        indent()
    }

    override fun dedent(levels: Int) {
        repeat(levels) {
            indent = indent.removeSuffix(INDENT)
        }
    }

    override fun indent(levels: Int) {
        indent += INDENT.repeat(levels)
    }

    override fun openBlock(template: String, vararg args: Any) {
        write(template, *args)
        indent()
    }

    override fun persist() {
        val content = buildString {
            appendLine("// Code generated by ddb-mapper-ops-codegen. DO NOT EDIT!")
            appendLine()
            appendLine("package $pkg")
            appendLine()
            imports.formatted.takeIf { it.isNotBlank() }?.let { appendLine(it) }
            append(builder.toString())
        }
        persistCallback(content)
    }

    override fun withBlock(preTemplate: String, postText: String, vararg args: Any, block: () -> Unit) {
        openBlock(preTemplate, *args)
        block()
        closeBlock(postText)
    }

    override fun withDocs(block: () -> Unit) {
        write("/**")
        indent += " * "
        block()
        indent = indent.removeSuffix(" * ")
        write(" */")
    }

    override fun write(template: String, vararg args: Any) {
        writeInline(template, *args)
        builder.append('\n')
    }

    override fun writeInline(template: String, vararg args: Any) {
        val text = engine.process(template, args.toList())
        if (builder.endsWith('\n')) builder.append(indent)
        builder.append(text)
    }
}
